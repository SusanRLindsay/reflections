When would you want to use a remote repository rather than keeping all your work local?

I often work on multiple computers; it would be valuable to be able to store my work in a central location as it progresses. Also if more than one person is contributing, this would be a useful service.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Similar to reasons for not preferring automatic git saves on local repositories: probably wouldn't result in runnable code, allowe user to choose small meaningful increments to store.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

A clone is a copy of the repository that is local. It can be a clone of a repository on GitHub or a local clone of a local repository. You would clone from GitHub to begin your own work on a project, etc. probably with plans to push changes back if you have those rights. I'm less sure why you would clone a local repo locally. It seems using master and branch would be more useful.

Master and branch are commit changes to the same repository. Branching is a way to create a different commit path - one that may be abandoned and become unreachable or eventually merged back into the master  branch.

Forking is a way to clone a repository and have changes that are made to it kept separate from the original repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

Could serve as a reminder that you need to commit to bring your repository up to date .
Showed how to update your local copy of remote branches, explained that 
git pull origin master =  git fetch origin + git merge master origin/master
explained what a fast forward merge was.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

There are other CVS sites available such as BitBucket, but their procedures are similar to GitHub, so I am assuming the question refers to doing without any of these. There is a very significant learning curve to using Git and GitHub so using a simpler type of version control would be easier without that. I suspect that recovering from a loss in saved code would be much easier with Git and GitHub.
