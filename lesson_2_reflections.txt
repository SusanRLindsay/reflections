What happens when you initialize a repository? Why do you need to do it?

it seems as though it is the first steps toward deciding which files to have git track.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory encompasses files that may never be moved into the repository. i don't see any particular value right now to having a staging area between the working directory and the repository.

How can you use the staging area to make sure you have one commit per logical change? You can use the staging area to limit the amount of code that you are currently making changes to. This will help limit the scope of each commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are good for allowing experimental development without endangering a working model. Also for allowing parallel development such as converting to a different language.

Use git checkout -b new_branch_name after checking out prior commit and making changes you want to keep.

How do the diagrams help you visualize the branch structure? They literally diagram the branch structure of git's commits and branches. Head vs master concept.

git show commit# shows the diff between the commit and its parent, even if you don't know which it is due to a prior merge.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do? it takes the head of two branches, and compares them to the commit before the lines branched. The merge produces a file that adds any changes that have been maintained from where the commit branched to the heads of the two branches.

Conflict resolution during merge: open file, search for head, merged and master. Fix file to your satisfaction, save it. Returning to git bash, run git status, will show both modified. Perform git add <filename>, then git status will show merge in progress, conflicts fixed, but needto commit.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merges are rapid; manual merge allows full control over what code gets chosen.

After needing to perform merge conflict resolution, make changes to file and save. Then run git status and it should show conflict resolved. Then add file and save commit.